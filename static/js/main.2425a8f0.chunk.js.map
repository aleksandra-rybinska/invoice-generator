{"version":3,"sources":["AppContext.js","components/PositionsForm.js","components/InvoiceForm.js","components/PositionsTable.js","components/InvoiceDetails.js","components/SellerDetails.js","components/ClientDetails.js","components/Notes.js","components/PaymentDetails.js","components/Sing.js","components/ComponentToPrint.js","App.js","index.js"],"names":["AppContext","createContext","AppProvider","children","useLocalStorage","invoiceData","setInvoiceData","invoicePosition","setInvoicePosition","positionsList","setPositionsList","value","updateInvoiceData","e","target","name","updateInvoicePosition","updatePositionsList","newPosition","id","uuidv4","description","jm","quantity","price","amount","Provider","useInvoice","useContext","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","PositionsForm","useEffect","parseFloat","toFixed","n","className","onSubmit","type","placeholder","onChange","test","onClick","forEach","k","removeItem","location","reload","InvoiceForm","invNum","invDate","endDate","clientName","clientAddress1","clientAddress2","clientNip","rows","notes","inWords","payed","payedDate","PositionsTable","totalAmount","reduce","acc","map","index","InvoiceDetails","SellerDetails","ClientDetails","Notes","PaymentDetails","Sing","ComponentToPrint","React","forwardRef","props","ref","App","showInvoice","setShowInvoice","toggleShowInvoice","componentRef","useRef","handlePrint","useReactToPrint","content","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2425a8f0.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nconst AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n    const [invoiceData, setInvoiceData] = useLocalStorage('invoiceData', []);\n    const [invoicePosition, setInvoicePosition] = useLocalStorage(\n        'invoicePosition',\n        []\n    );\n\n    const [positionsList, setPositionsList] = useLocalStorage(\n        'positionsList',\n        []\n    );\n\n    const updateInvoiceData = (e) => {\n        setInvoiceData({\n            ...invoiceData,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const updateInvoicePosition = (e) => {\n        setInvoicePosition({\n            ...invoicePosition,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const updatePositionsList = () => {\n        const newPosition = {\n            id: uuidv4(),\n            description: invoicePosition.description,\n            jm: invoicePosition.jm,\n            quantity: invoicePosition.quantity,\n            price: invoicePosition.price,\n            amount: invoicePosition.amount,\n        };\n\n        setPositionsList([...positionsList, newPosition]);\n        setInvoicePosition([]);\n    };\n\n    const value = {\n        invoiceData,\n        updateInvoiceData,\n        invoicePosition,\n        updateInvoicePosition,\n        updatePositionsList,\n        positionsList,\n        setInvoicePosition,\n    };\n\n    return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\nexport const useInvoice = () => {\n    return useContext(AppContext);\n};\n\n// Local storage hook: https://usehooks.com/useLocalStorage/?fbclid=IwAR0h5qXIzD8JAptCbqrKaFCbTsFQgROa7_f51GKzoCNjjYPQ7Ln9EurFcLs\nfunction useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            // Get from local storage by key\n            const item = window.localStorage.getItem(key);\n            // Parse stored json or if none return initialValue\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return initialValue;\n        }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    };\n\n    return [storedValue, setValue];\n}\n","import { useEffect } from 'react';\nimport { useInvoice } from '../AppContext';\n\nconst PositionsForm = () => {\n    const {\n        invoicePosition,\n        updateInvoicePosition,\n        updatePositionsList,\n        setInvoicePosition,\n    } = useInvoice();\n\n    useEffect(() => {\n        const calculateAmount = (amount) => {\n            setInvoicePosition({\n                ...invoicePosition,\n                amount: (\n                    parseFloat(invoicePosition.price) *\n                    parseFloat(invoicePosition.quantity)\n                ).toFixed(2),\n            });\n        };\n\n        calculateAmount(invoicePosition.amount);\n    }, [\n        invoicePosition.amount,\n        invoicePosition.price,\n        invoicePosition.quantity,\n    ]);\n\n    function isNumber(n) {\n        return /^-?[\\d.]+(?:e-?\\d+)?$/.test(n);\n    }\n\n    const handleDelete = () => {\n        let keysToRemove = ['invoicePosition', 'positionsList'];\n        keysToRemove.forEach((k) => localStorage.removeItem(k));\n        window.location.reload();\n    };\n\n    return (\n        <form className='form' onSubmit={updatePositionsList}>\n            <div className='form-row'>\n                <label>Nazwa towaru / usługi:</label>\n                <input\n                    type='text'\n                    id='description'\n                    name='description'\n                    placeholder='nazwa usługi'\n                    value={invoicePosition.description}\n                    onChange={updateInvoicePosition}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Jm:</label>\n                <input\n                    type='text'\n                    id='jm'\n                    name='jm'\n                    placeholder='np. szt'\n                    value={invoicePosition.jm}\n                    onChange={updateInvoicePosition}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Ilość *:</label>\n                <input\n                    type='text'\n                    id='quantity'\n                    name='quantity'\n                    placeholder='ilość'\n                    value={invoicePosition.quantity}\n                    onChange={updateInvoicePosition}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Cena jednostkowa *:</label>\n                <input\n                    type='text'\n                    id='price'\n                    name='price'\n                    placeholder='cena jednostkowa'\n                    value={invoicePosition.price}\n                    onChange={updateInvoicePosition}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Wartość:</label>\n                <p>\n                    {isNumber(invoicePosition.amount)\n                        ? invoicePosition.amount\n                        : ''}\n                    &nbsp;PLN\n                </p>\n            </div>\n            <div className='form-annotation'>\n                <h4>\n                    * Wpisując wartości dziesiętne należy użyć KROPKI zamiast\n                    przecinka\n                    <br /> (np. 1.99)\n                </h4>\n            </div>\n            <div className='form-button-container'>\n                <button type='submit'>DODAJ POZYCJĘ</button>\n                <button type='reset' onClick={handleDelete}>\n                    USUŃ WSZYSTKIE POZYCJE\n                </button>\n            </div>\n        </form>\n    );\n};\n\nexport default PositionsForm;\n","import { useInvoice } from '../AppContext';\n\nconst InvoiceForm = () => {\n    const { invoiceData, updateInvoiceData } = useInvoice();\n\n    return (\n        <form className='form'>\n            <div className='form-row'>\n                <label>Numer faktury:</label>\n                <input\n                    type='text'\n                    id='text'\n                    name='invNum'\n                    placeholder='nr faktury'\n                    value={invoiceData.invNum}\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Data wystawienia:</label>\n                <input\n                    type='date'\n                    id='text'\n                    name='invDate'\n                    value={invoiceData.invDate}\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Data zakończenia usługi:</label>\n                <input\n                    type='date'\n                    id='text'\n                    name='endDate'\n                    value={invoiceData.endDate}\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Nazwa klienta:</label>\n                <input\n                    type='text'\n                    id='text'\n                    name='clientName'\n                    value={invoiceData.clientName}\n                    placeholder='nazwa firmy'\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Adres klienta - ulica i nr:</label>\n                <input\n                    type='text'\n                    id='text'\n                    name='clientAddress1'\n                    value={invoiceData.clientAddress1}\n                    placeholder='ulica'\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Kod pocztowy i miejscowość:</label>\n                <input\n                    type='text'\n                    id='text'\n                    name='clientAddress2'\n                    value={invoiceData.clientAddress2}\n                    placeholder='kod pocztowy i miejscowość'\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>NIP:</label>\n                <input\n                    type='text'\n                    id='text'\n                    name='clientNip'\n                    value={invoiceData.clientNip}\n                    placeholder='NIP klienta'\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Uwagi:</label>\n                <textarea\n                    id='text'\n                    name='notes'\n                    placeholder='uwagi'\n                    rows='7'\n                    value={invoiceData.notes}\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Słownie do zapłaty:</label>\n                <input\n                    id='text'\n                    name='inWords'\n                    placeholder='słownie'\n                    value={invoiceData.inWords}\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Sposób zapłaty:</label>\n                <input\n                    id='text'\n                    name='payed'\n                    placeholder='sposób zapłaty'\n                    value={invoiceData.payed}\n                    onChange={updateInvoiceData}\n                />\n            </div>\n            <div className='form-row'>\n                <label>Data zapłaty:</label>\n                <input\n                    type='date'\n                    id='text'\n                    name='payedDate'\n                    value={invoiceData.payedDate}\n                    onChange={updateInvoiceData}\n                />\n            </div>\n        </form>\n    );\n};\n\nexport default InvoiceForm;\n","import { useInvoice } from '../AppContext';\n\nconst PositionsTable = () => {\n    const { positionsList } = useInvoice();\n    const totalAmount = positionsList\n        .reduce((acc, item) => acc + item.price * item.quantity, 0)\n        .toFixed(2);\n\n    return (\n        <section className='grid'>\n            <div className='grid-row'>\n                <p>\n                    <b>Lp.</b>\n                </p>\n                <p>\n                    <b>Nazwa towaru lub usługi</b>\n                </p>\n                <p>\n                    <b>Jm</b>\n                </p>\n                <p>\n                    <b>Ilość</b>\n                </p>\n                <p>\n                    <b>Cena jedn. w PLN</b>\n                </p>\n                <p>\n                    <b>Wartość w PLN</b>\n                </p>\n            </div>\n\n            {positionsList.map((item, index) => {\n                return (\n                    <div key={item.id} className='grid-row'>\n                        <p>{index + 1}</p>\n                        <p>{item.description}</p>\n                        <p>{item.jm}</p>\n                        <p>{item.quantity}</p>\n                        <p>{item.price}</p>\n                        <p>{item.amount}</p>\n                    </div>\n                );\n            })}\n            <div className='total'>\n                <h2>\n                    Razem do zapłaty:&nbsp;&nbsp;\n                    {totalAmount}\n                    &nbsp;PLN\n                </h2>\n            </div>\n        </section>\n    );\n};\n\nexport default PositionsTable;\n","import { useInvoice } from '../AppContext';\n\nconst InvoiceDetails = () => {\n    const { invoiceData } = useInvoice();\n    return (\n        <section className='date'>\n            <ul>\n                <li>\n                    <h1>Faktura</h1>\n                </li>\n                <li>\n                    <p>\n                        nr: &nbsp;\n                        {invoiceData.invNum}\n                    </p>\n                </li>\n                <li>\n                    <p>\n                        Wystawiona w dniu: &nbsp;{invoiceData.invDate},\n                        Częstochowa\n                    </p>\n                </li>\n                <li>\n                    <p>Data zakończenia usługi: &nbsp;{invoiceData.endDate}</p>\n                </li>\n            </ul>\n        </section>\n    );\n};\n\nexport default InvoiceDetails;\n","const SellerDetails = () => {\n    return (\n        <div className='details-container'>\n            <h2 className='details-title'>Sprzedawca</h2>\n            <p>\"RJR\" ROMAN RYBIŃSKI - usługi, produkcja i montaże</p>\n            <p>ul. Michała Faradaya 54</p>\n            <p>42-202 Częstochowa</p>\n            <p>NIP: 6271485538</p>\n            <p>Nr konta: 53 1140 2004 0000 3202 8126 1869</p>\n        </div>\n    );\n};\nexport default SellerDetails;\n","import { useInvoice } from '../AppContext';\n\nconst ClientDetails = () => {\n    const { invoiceData } = useInvoice();\n\n    return (\n        <div className='details-container'>\n            <h2 className='details-title'>Nabywca</h2>\n            <p>{invoiceData.clientName}</p>\n            <p>{invoiceData.clientAddress1}</p>\n            <p>{invoiceData.clientAddress2}</p>\n            <p>NIP:{invoiceData.clientNip}</p>\n        </div>\n    );\n};\nexport default ClientDetails;\n","import { useInvoice } from '../AppContext';\n\nconst Notes = () => {\n    const { positionsList } = useInvoice();\n    return (\n        <div className='notes'>\n            <section className='notes-container'>\n                <p>Uwagi:</p>\n                <p>{positionsList.notes}</p>\n            </section>\n        </div>\n    );\n};\n\nexport default Notes;\n","import { useInvoice } from '../AppContext';\n\nconst PaymentDetails = () => {\n    const { invoiceData } = useInvoice();\n    return (\n        <div className='payments-container'>\n            <p>słownie:&nbsp;{invoiceData.inWords}</p>\n            <p>sposób zapłaty:&nbsp;{invoiceData.payed} </p>\n            <p>data zapłaty:&nbsp;{invoiceData.payedDate}</p>\n        </div>\n    );\n};\n\nexport default PaymentDetails;\n","const Sing = () => {\n    return (\n        <div className='sign'>\n            <div className='sign-container'>\n                <p>Podpis osoby uprawnionej do wystawienia faktury</p>\n            </div>\n            <div className='sign-container'>\n                <p>Podpis osoby uprawnionej do odbioru faktury</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Sing;\n","import React from 'react';\nimport InvoiceDetails from './InvoiceDetails';\nimport SellerDetails from './SellerDetails';\nimport ClientDetails from './ClientDetails';\nimport Notes from './Notes';\nimport PaymentDetails from './PaymentDetails';\nimport Sing from './Sing';\nimport PositionsTable from './PositionsTable';\n\nexport const ComponentToPrint = React.forwardRef((props, ref) => {\n    return (\n        <div ref={ref}>\n            <InvoiceDetails />\n            <section className='details'>\n                <SellerDetails />\n                <ClientDetails />\n            </section>\n            <PositionsTable />\n            <div className='payments'>\n                <PaymentDetails />\n                <Notes />\n            </div>\n            <Sing />\n            <p className='annotation'>\n                Sprzedawca zwolniony podmiotowo z podatku od towarów i usług\n                [dostawa towarów lub świadczenie usług zwolnione na podstawie\n                art. 113 ust. 1(albo ust. 9) ustawy z dnia 11.03.2004 r. o\n                podatku od towarów i usług (Dz.U. z 2016r. poz. 710, z późn.\n                zm.)]\n            </p>\n        </div>\n    );\n});\n","import React, { useState, useRef, forwardRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport './styles.css';\nimport PositionsForm from './components/PositionsForm';\nimport InvoiceForm from './components/InvoiceForm';\nimport PositionsTable from './components/PositionsTable';\nimport { ComponentToPrint } from './components/ComponentToPrint';\n\nfunction App() {\n    const [showInvoice, setShowInvoice] = useState(false);\n    const toggleShowInvoice = () => setShowInvoice(!showInvoice);\n\n    const componentRef = useRef();\n    const handlePrint = useReactToPrint({\n        content: () => componentRef.current,\n    });\n\n    return (\n        <>\n            {showInvoice ? (\n                <div>\n                    <menu className='menu'>\n                        <button onClick={toggleShowInvoice}>\n                            WRÓĆ DO EDYCJI\n                        </button>\n                        <button onClick={handlePrint}>DRUKUJ</button>\n                    </menu>\n                    <ComponentToPrint ref={componentRef} />\n                </div>\n            ) : (\n                <div className='wrapper'>\n                    <section className='form-section'>\n                        <InvoiceForm />\n                        <PositionsForm />\n                    </section>\n                    <h3 className='ml'>Podgląd pozycji na fakturze:</h3>\n                    <PositionsTable />\n\n                    <button className='ml' onClick={toggleShowInvoice}>\n                        PODGLĄD FAKTURY\n                    </button>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { AppProvider } from './AppContext';\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App />\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}